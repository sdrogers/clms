# load joe files
# needs xcms3, see https://bioconductor.org/packages/release/bioc/html/xcms.html for installation
library(xcms)
#### some useful functions ####
getDesign = function(mzml_files, label) {
design <- data.frame(sample_name = sub(basename(mzml_files), pattern = '.mzML', replacement = "", fixed = TRUE),
sample_group = c(rep(label, length(mzml_files))),
stringsAsFactors = FALSE)
return(design)
}
readData = function(files, design, mode="onDisk", msLevel=1) {
raw_data <- MSnbase::readMSData(files = files, pdata = new("NAnnotatedDataFrame", design),
mode = mode, msLevel. = msLevel, centroided. = TRUE)
return(raw_data)
}
pickPeaks = function(raw_data, ppm, peakwidth, snthresh, prefilter, mzdiff) {
# https://rdrr.io/bioc/xcms/man/findChromPeaks-centWave.html
cwp = CentWaveParam(ppm=ppm, peakwidth=peakwidth, snthresh=snthresh,
prefilter=prefilter, mzdiff=mzdiff)
xdata <- findChromPeaks(raw_data, param = cwp)
return(xdata)
}
filterDf <- function(df, rt_start, rt_end, min_intensity, min_sn) {
peak_info <- df[which(df$rt >= rt_start),]
peak_info <- peak_info[which(peak_info$rt <= rt_end),]
peak_info <- peak_info[which(peak_info$rtmin >= rt_start),]
peak_info <- peak_info[which(peak_info$into >= min_intensity),]
peak_info <- peak_info[which(peak_info$sn >= min_sn),]
return(peak_info)
}
get_feature = function(raw_data, row, msLevel) {
sample <- row$sample
mz_range_df <- row[, c('mzmin', 'mzmax')]
rt_range_df <- row[, c('rtmin', 'rtmax')]
# TODO: we need to add some padding to the mz_range to get the complete chromatogram, why?!
mz_range <- c(mz_range_df$mzmin-0.0003, mz_range_df$mzmax+0.0003)
# alternatively we have a ppm constant for the bounds
# mz_range = c(mz * (1-mzppm/1e6), mz * (1+mzppm/1e6))
rt_range <- c(rt_range_df$rtmin, rt_range_df$rtmax)
# below will not give you the mz values of each data point
# chr_raw <- chromatogram(raw_data, mz=mz_range, rt=rt_range)
# chr_raw <- chr_raw[1, sample]
# below is the correct code
one_file = filterFile(raw_data, sample)
filtered_file = filterRt(filterMz(one_file, mz_range), rt_range)
chrom_data = as(filtered_file, 'data.frame')
plotMsData(chrom_data)
# TODO: normalise the rt values, first value (start) is 0
# TODO: normalise the mz values, the average is 0
# TODO: not sure about the intensities
mz_values = chrom_data$mz
rt_values = chrom_data$rt
intensity_values = chrom_data$i
return(list(mz=row$mz, mzmin=row$mzmin, mzmax=row$mzmax,
rt=row$rt, rtmin=row$rtmin, rtmax=row$rtmax,
into=row$into, maxo=row$maxo, sn=row$sn,
mz_values = mz_values, rt_values = rt_values, intensity_values = intensity_values,
msLevel=msLevel, fromFile=sample))
}
sortDf <- function(df, decreasing=TRUE) {
speaks = df[order(df[,'into'], decreasing=decreasing),]
return(speaks)
}
get_all_features <- function(raw_data_in_memory, filtered_list, msLevel) {
start.time <- Sys.time()
all_features <- lapply(filtered_list[1:N], function(row) {
feature <- get_feature(raw_data_in_memory, row, msLevel)
})
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
return(all_features)
}
get_all_features_par <- function(raw_data_in_memory, filtered_list, msLevel) {
library(foreach)
library(doParallel)
no_cores <- detectCores() - 1
cl<-makeCluster(no_cores)
registerDoParallel(cl)
start.time <- Sys.time()
all_features <- foreach(i=1:N,
.combine = list,
.multicombine = TRUE,
.export = 'get_feature',
.packages = 'xcms') %dopar% {
row <- filtered_list[[i]]
feature <- get_feature(raw_data_in_memory, row, msLevel)
}
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
return(all_features)
}
#### end ####
mzml_dir <- 'C:\Users\Vinny\work\beer_data\POS'
mzml_dir <- 'C:\\Users\\Vinny\\work\\beer_data\\POS'
mzml_files <- dir(mzml_dir, full.names=TRUE)
design <- getDesign(mzml_files, "BEER")
msLevel = 1
raw_data_on_disk <- readData(mzml_files, design, mode='onDisk', msLevel=msLevel)
raw_data_in_memory <- readData(mzml_files, design, mode='inMemory', msLevel=msLevel)
xdata <- pickPeaks(raw_data_on_disk, ppm=10, peakwidth=c(5, 100), snthresh=3, prefilter=c(3, 1000), mzdiff=0.001)
peaks_df <- data.frame(chromPeaks(xdata))
View(peaks_df)
sorted_df <- sortDf(peaks_df, FALSE)
filtered_list <-  setNames(split(sorted_df, seq(nrow(sorted_df))), rownames(sorted_df)) # convert df to list
N <- length(filtered_list)
N <- 10
all_features <- get_all_features(xdata, filtered_list, msLevel)
all_features
N <- length(filtered_list)
all_features <- get_all_features(xdata, filtered_list, msLevel)
N <- 100
all_features <- get_all_features(xdata, filtered_list, msLevel)
filtered_list[1,]
filtered_list
attributes(raw_data_on_disk)
raw_data_on_disk$featureData
raw_data_on_disk[1]
raw_data_on_disk[2]
raw_data_on_disk[3]
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mzR", version = "3.8")
library(mzR)
install.packages("msdata")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msdata", version = "3.8")
library(msdata)
filepath <- system.file("microtofq", package = "msdata")
#filepath <- system.file("microtofq", package = "msdata")
file <- list.files(mzml_dir, pattern="T10_POS.mzML",
full.names=TRUE, recursive = TRUE)
mz <- openMSfile(file)
fileName(mz)
runInfo(mz)
close(mz)
mzml_dir
#filepath <- system.file("microtofq", package = "msdata")
file <- list.files(mzml_dir[1], pattern="T10_POS.mzML",
full.names=TRUE, recursive = TRUE)
mz <- openMSfile(file)
length(filename)
length(mzml_dir)
filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="T10_POS.mzML",
full.names=TRUE, recursive = TRUE)
mz <- openMSfile(file)
filepath
filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="T10_POS.mzML",
full.names=TRUE, recursive = TRUE)
mz <- openMSfile(file)
filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="MM14.mzML",
full.names=TRUE, recursive = TRUE)
mz <- openMSfile(file)
filepath
fileName(mz)
runInfo(mz)
close(mz)
mz#
mz
filepath <- "C:/Users/Vinny/work/beer_data/POS"
file <- list.files(filepath, pattern="MM14.mzML",
full.names=TRUE, recursive = TRUE)
mz <- openMSfile(file)
filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="MM14.mzML",
full.names=TRUE, recursive = TRUE)
file
filepath <- "C:/Users/Vinny/work/beer_data/POS"
#filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="MM14.mzML",
full.names=TRUE, recursive = TRUE)
file
filepath <- system.file("microtofq", package = "msdata")
filepath
filepath <- "C:/Users/Vinny/work/beer_data/POS"
filepath
filepath <- "C:/Users/Vinny/work/beer_data/POS"
filepath
#filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="MM14.mzML",
full.names=TRUE, recursive = TRUE)
file
#filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="T10_POS.mzML",
full.names=TRUE, recursive = TRUE)
file
mz <- openMSfile(file)
mz <- openMSfile(C:/Users/Vinny/work/beer_data/POS/Beer_1_T10_POS.mzML)
mz <- openMSfile("C:/Users/Vinny/work/beer_data/POS/Beer_1_T10_POS.mzML")
fileName(mz)
runInfo(mz)
close(mz)
chromatogram(mz)
getScan(raw_data_on_disk,1)
getScan(raw_data_on_memory,1)
getScan(raw_data_in_memory,1)
all_features
plot(all_features$CP56591$rt,all_features$CP56591$intensity_values)
all_features$CP56591$rt
plot(all_features$CP56591$rt_values,all_features$CP56591$intensity_values)
par(mforw=c(1,1))
par(mfrow=c(1,1))
par(mforw=c(1,1))
plot(all_features$CP56591$rt_values,all_features$CP56591$intensity_values)
all_features[[1]]
plot(all_features[[1]]$rt_values,all_features[[1]]$intensity_values)
i= 1; plot(all_features[[i]]$rt_values,all_features[[i]]$intensity_values)
i= 2; plot(all_features[[i]]$rt_values,all_features[[i]]$intensity_values)
i= 3; plot(all_features[[i]]$rt_values,all_features[[i]]$intensity_values)
i= 4; plot(all_features[[i]]$rt_values,all_features[[i]]$intensity_values)
i= 5; plot(all_features[[i]]$rt_values,all_features[[i]]$intensity_values)
i= 6; plot(all_features[[i]]$rt_values,all_features[[i]]$intensity_values)
# needs xcms3, see https://bioconductor.org/packages/release/bioc/html/xcms.html for installation
library(xcms)
xdata <- findChromPeaks(raw_data_on_disk, param = cwp,return.type="list")
cwp = CentWaveParam(ppm=10, peakwidth=c(5, 100), snthresh=3, prefilter=c(3, 1000), mzdiff=0.001)
xdata <- findChromPeaks(raw_data_on_disk, param = cwp,return.type="list")
mzml_dir <- 'C:\\Users\\Vinny\\work\\beer_data\\POS'
mzml_files <- dir(mzml_dir, full.names=TRUE)
mzml_files
design <- getDesign(mzml_files[1], "BEER")
msLevel = 1
raw_data_on_disk <- readData(mzml_files, design, mode='onDisk', msLevel=msLevel)
xdata <- pickPeaks(raw_data_on_disk, ppm=10, peakwidth=c(5, 100), snthresh=3, prefilter=c(3, 1000), mzdiff=0.001)
peaks_df <- data.frame(chromPeaks(xdata))
sorted_df <- sortDf(peaks_df, FALSE)
filtered_list <-  setNames(split(sorted_df, seq(nrow(sorted_df))), rownames(sorted_df)) # convert df to list
N <- length(filtered_list)
N <- 100
all_features <- get_all_features(xdata, filtered_list, msLevel)
all_features[[1]]
msLevel = 1
raw_data_on_disk <- readData(mzml_files[1], design, mode='onDisk', msLevel=msLevel)
xdata <- pickPeaks(raw_data_on_disk, ppm=10, peakwidth=c(5, 100), snthresh=3, prefilter=c(3, 1000), mzdiff=0.001)
peaks_df <- data.frame(chromPeaks(xdata))
sorted_df <- sortDf(peaks_df, FALSE)
filtered_list <-  setNames(split(sorted_df, seq(nrow(sorted_df))), rownames(sorted_df)) # convert df to list
N <- length(filtered_list)
N <- 100
all_features <- get_all_features(xdata, filtered_list, msLevel)
all_features[[1]]
all_features[[2]]
all_features[[3]]
all_features[[4]]
all_features[[5]]
all_features[[7]]
all_features[[8]]
all_features[[9]]
all_features[[10]]
all_features[[11]]
all_features[[12]]
all_features[[13]]
all_features[[14]]
all_features[[15]]
all_features[[16]]
all_features[[17]]
all_features[[18]]
all_features[[19]]
all_features[[10]]
all_features[[10]]
all_features[[20]]
all_features[[21]]
all_features[[22]]
all_features[[23]]
all_features[[24]]
all_features[[25]]
all_features[[26]]
xdata[[1]]
xdata[[2]]
x <- chromPeaks(xdata)
dim(x)
